{"version":3,"file":"static/js/736.1159f6c5.chunk.js","mappings":"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","sources":["api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '7857d3be668b30082be7813451c66108';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `3/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `3/search/movie?query=${query}&include_adult=false&language=en-US&page=1&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const movieDetails = async ({ id }) => {\n  const response = await axios.get(\n    `3/movie/${id}?language=en-US&append_to_response=images,credits&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getCast = async ({ id }) => {\n  const response = await axios.get(\n    `3/movie/${id}/credits?language=en-US&append_to_response=images,credits&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getReviews = async ({ id }) => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?language=en-US&append_to_response=images,credits&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getPoster = url =>\n  url\n    ? `https://image.tmdb.org/t/p/w300${url}`\n    : 'https://placehold.it/300x450?text=Image_not_found';\n\nexport const movieResponseDataNormalize = response => {\n  const responseData = {\n    imageUrl: getPoster(response.poster_path),\n    title: response.title,\n    release_date: response.release_date.slice(0, 4),\n    overview:\n      response.overview !== '' ? response.overview : 'There is no overview',\n    genres:\n      response.genres.length > 0\n        ? response.genres?.map(genre => genre.name).join(', ')\n        : 'No genres found',\n    vote_average: response.vote_average,\n  };\n\n  return responseData;\n};\n","import styled from '@emotion/styled'\n\nexport const Item = styled.b`\ncolor: #0076CE;`\n\nexport const ListCast = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\ngap: 20px;\n`\n\nexport const CastContainer = styled.div`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-direction: column;\nflex-wrap: wrap;\nmatgin: 0;\nmax-width: 200px`;\n\nexport const CastImg = styled.img`\nbox-shadow: 0 4px 8px rgba(0, 0, 0.2, 0.1);`\n\n\n","import { Loader } from \"react-loaders\";\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'api';\nimport { useParams } from 'react-router-dom';\nimport {Item, ListCast, CastContainer, CastImg} from './Cast.styled'\nimport { getPoster } from \"api\";\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [castInfo, setCastInfo] = useState(null);\n    const [isLoading, setLoader] = useState(false);\n    const [isError, setError] = useState(false);\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                setLoader(true);\n                const response = await getCast({ id: movieId });\n                const castResponse = response.cast;\n                const details = castResponse.map(item => ({\n                    id: item.id,\n                    img:  getPoster(item.profile_path),\n                    name: item.name,\n                    char: item.character,\n                }));\n                setCastInfo(details);\n            } catch (error) {\n                setError(true);\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        if (movieId) {\n            fetchCast();\n        }\n    }, [movieId]);\n\n    return (\n        <div>\n            {isLoading && <Loader />}\n            {isError && <div>Error catching cast</div>}\n            {castInfo && castInfo.length > 0 ? (\n                <ListCast>\n                    {castInfo.map(item => (\n                        <CastContainer key={item.id}>\n                            <CastImg src={item.img} alt={item.name} width='200'/>\n                            <div>\n                            <p><Item>Name:</Item> {item.name}</p>\n                            <p><Item>Character:</Item> {item.char}</p>\n                            </div>\n                        </CastContainer>\n                    ))}\n                </ListCast>\n            ) : (\n                <p>No cast info found</p>\n            )}\n        </div>\n    );\n}"],"names":["API_KEY","axios","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","concat","sent","abrupt","stop","apply","arguments","searchMovies","_ref2","_callee2","query","_context2","data","results","_x","movieDetails","_ref4","_callee3","_ref3","id","_context3","_x2","getCast","_ref6","_callee4","_ref5","_context4","_x3","getReviews","_ref8","_callee5","_ref7","_context5","_x4","getPoster","url","movieResponseDataNormalize","_response$genres","imageUrl","poster_path","title","release_date","slice","overview","genres","length","map","genre","name","join","vote_average","Item","styled","_templateObject","_taggedTemplateLiteral","ListCast","_templateObject2","CastContainer","_templateObject3","CastImg","_templateObject4","Cast","movieId","useParams","_useState","useState","_useState2","_slicedToArray","castInfo","setCastInfo","_useState3","_useState4","isLoading","setLoader","_useState5","_useState6","isError","setError","useEffect","fetchCast","castResponse","details","cast","item","img","profile_path","char","character","t0","finish","_jsxs","children","_jsx","Loader","src","alt","width"],"sourceRoot":""}